// Grammar for Pointcut Declarations

// Top-Level Pointcut List
pointcut_list ::= { comment | pointcut_declaration } // zero or more, at least one enforced by parser

// Pointcut Declarations
pointcut_declaration ::= [ "export" ] pointcut_type pointcut_name "=" pointcut_expr ";"

// Pointcut Types
pointcut_type ::= "run_pointcut" | "call_pointcut"

// Pointcut Names
pointcut_name ::= identifier

// Comments
comment ::= "#" { any_character_except_newline } newline

// Pointcut Expressions
pointcut_expr ::= or_expr

or_expr ::= and_expr { "||" and_expr }

and_expr ::= unary_expr { "&&" unary_expr }

unary_expr ::= "!" unary_expr
             | primary_expr

primary_expr ::= "(" pointcut_expr ")"
               | pointcut_primary

// Pointcut Primary Expressions
pointcut_primary ::= func_expression
                   | pragma_clang_expression
                   | annotation_expression
                   | annotation_analysis_expression

// Function Expression
func_expression ::= "func" "(" identifier ")"

// Pragma Clang Expression
pragma_clang_expression ::= "pragma_clang" "(" pragma_kind "," identifier ")"

// Annotation Expression
annotation_expression ::= "annotation" "(" identifier ")"

// Annotation Analysis Expression
annotation_analysis_expression ::= "annotation_analysis" "(" identifier ")"

// Pragma Kind
pragma_kind ::= "bss" | "data" | "relro" | "rodata" | "text"

// Identifiers and Tokens
identifier ::= [a-zA-Z_][a-zA-Z0-9_]*